{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Print to console": {
        "prefix": "cpp",
        "body": [
            "//!-----------------------------------------------------!//",
            "//!                  YUSUF REZA HASNAT                  !//",
            "//!-----------------------------------------------------!//",
            "",
            "",
            "#include<bits/stdc++.h>",
            "// #include \"debug.h\"",
            "using namespace std;",
            "",
            "#define int   long long",
			"#define float long double",
			"#define pb    push_back",
            "#define vf(v) (v).begin(), (v).end()",
            "#define vr(v) (v).rbegin(), (v).rend()",
            "#define endl \"\\n\"",
            "#define YUSUF ios_base::sync_with_stdio(false),",
            "#define REZA  cin.tie(NULL), ",
            "#define HASNAT cout.tie(NULL)",
            "",
            "int mod  = 1000000007;",
			"float pi = acos(-1);",
            "int inf  = 1e18;",
			"",
            "void solve()",
            "{",
            "\tint ${2:n};",
            "\tcin >> ${2:n};",
            "\t",
            "}",
			"",
            "int32_t main()",
            "{",
			"\tYUSUF REZA HASNAT;",
            "\tint t = 1;",
            "\t${1://}cin >> t;",
            "\twhile(t--)",
            "\t\tsolve();",
            "\treturn 0;",
            "}",
        ],
        "description": "Log output to console"
    },
    "Dfs code":{
        "prefix": "dfs_code",
        "body":[
        "map<int,vector<int>> adj;",
        "map<int,int>visited,parent,level,color;",
        "",
        "void dfs(int start)",
        "{",
        "\tvisited[start]=1;",
        "\tfor (auto child : adj[start])",
        "\t{",
        "\t\tif (!visited[child])",
        "\t\t{",
        "\t\t\tdfs(child);",
        "\t\t}",
        "\t}",
        "\tvisited[start]=2;",
        "}",
        "",
        ],
        "description": "dfs code"
    },
    "BFS code":{
        "prefix": "bfs_code",
        "body":[
        "map<int,vector<int>> adj;",
        "map<int,int>visited,parent,level,color;",
        "",
        "void bfs(int start)",
        "{",
        "\tqueue<int> q;",
        "\tq.push(start);",
        "\tvisited[start] = 1;",
        "\twhile (!q.empty())",
        "\t{",
        "\t\tint k = q.front();",
        "\t\tq.pop();",
        "\t\tfor (auto child : adj[k])",
        "\t\t{",
        "\t\t\tif (!visited[child])",
        "\t\t\t{",
        "\t\t\t\tq.push(child);",
        "\t\t\t\tvisited[child] = 1;",
        "\t\t\t\tvisited[child] = 1;",
        "\t\t\t\tlevel[child] = level[k] + 1;",
        "\t\t\t}",
        "\t\t}",
        "\t}",
        "}",
        "",
        ],
        "description": "dfs code"
    },
    "cpp temp":{
        "prefix": "cpp temp",
        "body":[
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "#define int long long",
            "#define float long double",
            "#define endl \"\\n\"",
            "const int INFI = 1e18;",
            "const int MOD = 1e9 + 7;",
            "int32_t main()",
            "{",
                "\tios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);",
                "\tint test_case = 1;",
                "\tcin >> test_case;",
                "\t// cin.ignore();",
                "\twhile (test_case--)",
                "\t{",
                "\t ",   
                "\t}",
                "\treturn 0;",
            "}",
        ],
        "description": "dfs code"
    },
    "order set template":{
        "prefix": "order set template",
        "body":[
            "#include <ext/pb_ds/assoc_container.hpp>",
            "#include <ext/pb_ds/tree_policy.hpp>",
            "using namespace __gnu_pbds;",
            "",
            "#define ordered_set tree<int, null_type, greater<int>, rb_tree_tag, tree_order_statistics_node_update>",
        ],
        "description": "order set template"
    }
}