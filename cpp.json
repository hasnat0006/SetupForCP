{
    "starting template": {
        "prefix": "cpp",
        "body": [
            "//!-----------------------------------------------------!//",
            "//!                  YUSUF REZA HASNAT                  !//",
            "//!-----------------------------------------------------!//",
            "",
            "#pragma GCC optimize(\"O3\")",
            "#include<bits/stdc++.h>",
            "",
            "using namespace std;",
            "",
            "#define int   long long",
			"#define float long double",
            "#define vf(v) (v).begin(), (v).end()",
            "#define vr(v) (v).rbegin(), (v).rend()",
            "#define endl \"\\n\"",
            "#define YUSUF ios_base::sync_with_stdio(false),",
            "#define REZA  cin.tie(NULL), ",
            "#define HASNAT cout.tie(NULL)",
            "",
            "int mod  = 1000000007;",
            "int inf  = 1e18;",
			"",
            "void solve()",
            "{",
            "\t${2}",
            "}",
			"",
            "int32_t main()",
            "{",
			"\tYUSUF REZA HASNAT;",
            "\tint t = 1;",
            "\t${1://}cin >> t;",
            "\tfor (int i = 1; i <= t; i++){",
            "\t\tsolve(); ",
            "\t}",
            "\treturn 0;",
            "}",
        ],
        "description": "Log output to console"
    },
    "debug": {
        "prefix": "debug",
        "body": [
            "#ifndef ONLINE_JUDGE",
            "#include \"C:\\Users\\Yusuf Reza Hasnat\\OneDrive\\Desktop\\CP\\debug.h\"",
            "#else ",
            "#define dbg(x...)",
            "#define dbgc(x...)",
            "#endif",
        ],
        "description": "Log output to console"
    },
    "File Input Output": {
        "prefix": "fileIO",
        "body": [
            "freopen(\"input.txt\", \"r\", stdin);"
            "freopen(\"output.txt\", \"w\", stdout);"
        ],
        "description": "Log output to console"
    },
    "Dfs code":{
        "prefix": "dfs_code",
        "body":[
        "map<int,vector<int>> adj;",
        "map<int,int>visited,parent,level,color;",
        "",
        "void dfs(int start)",
        "{",
        "\tvisited[start]=1;",
        "\tfor (auto child : adj[start])",
        "\t{",
        "\t\tif (!visited[child])",
        "\t\t{",
        "\t\t\tdfs(child);",
        "\t\t}",
        "\t}",
        "\tvisited[start]=2;",
        "}",
        "",
        ],
        "description": "dfs code"
    },
    "BFS code":{
        "prefix": "bfs_code",
        "body":[
        "map<int,vector<int>> adj;",
        "map<int,int>visited,parent,level,color;",
        "",
        "void bfs(int start)",
        "{",
        "\tqueue<int> q;",
        "\tq.push(start);",
        "\tvisited[start] = 1;",
        "\twhile (!q.empty())",
        "\t{",
        "\t\tint k = q.front();",
        "\t\tq.pop();",
        "\t\tfor (auto child : adj[k])",
        "\t\t{",
        "\t\t\tif (!visited[child])",
        "\t\t\t{",
        "\t\t\t\tq.push(child);",
        "\t\t\t\tvisited[child] = 1;",
        "\t\t\t\tvisited[child] = 1;",
        "\t\t\t\tlevel[child] = level[k] + 1;",
        "\t\t\t}",
        "\t\t}",
        "\t}",
        "}",
        "",
        ],
        "description": "dfs code"
    },
    "order set template":{
        "prefix": "order set template",
        "body":[
            "#include <ext/pb_ds/assoc_container.hpp>"
            "#include <ext/pb_ds/tree_policy.hpp>"
            "using namespace std;"
            "using namespace __gnu_pbds;"
            "template <typename T> using o_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;"
            "template <typename T> using o_set_g = tree<T, null_type, greater<T>, rb_tree_tag, tree_order_statistics_node_update>;"
            "template <typename T> using o_multiset = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;"
            "template <typename T> using o_multiset_g = tree<T, null_type, greater_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;"
        ],
        "description": "order set template"
    },
    "Math": {
        "prefix": "mathSnip",
        "body": [
            "// ================= MATH UTIL BEGINS ================= //",
            "// ========== compute higher powers with mod ========== //",
            "int power(int x, int y, int p = mod) {",
            "    unsigned long long res = 1;",
            "    x = x % p;",
            "    while (y > 0) {",
            "        if (y & 1)",
            "             res = (res * x) % p;",
            "        y = y >> 1;",
            "        x = (x * x) % p;",
            "    }",
            "    return res;",
            "}",
            "// ====================================================== //",
            "// ============= using fermats little theorm ============= //",
            "int modInverse(int n, int p = mod)  { return power(n, p - 2, p); }",
            "// ======== Used to calculate nCr of higher values ======= //",
            "// faster calculation..",
            "int nCr(int n, int r, int p = mod) {",
            "    if (n < r)",
            "        return 0;",
            "    if (r == 0)",
            "        return 1;",
            "    vector<int> fac(n + 1, 0);",
            "    fac[0] = 1;",
            "    for (int i = 1; i <= n; i++)",
            "        fac[i] = (fac[i - 1] * i) % p;",
            "    return (fac[n] * modInverse(fac[r], p) % p * modInverse(fac[n - r], p) % p) % p;",
            "}",
            "// ================= MATH UTIL ENDS ================== //",
            ""
        ],
        "description": ""
        }
}
